AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Environment:
    Description: Environment
    Type: String
  VPCCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR of the VPC'

Outputs:
  VPCId:
    Description: 'VPC.'
    Value: !Ref VPC

Resources:
  ##### VPC #####
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ##### SUBNET PRIVATE AND PUBLIC #####
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-a'
        - Key: Reach
          Value: public

  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-a'
        - Key: Reach
          Value: private

  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-b'
        - Key: Reach
          Value: public

  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 4, 6 ]]
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-b'
        - Key: Reach
          Value: private

  ##### CONFIGURATION PUBLIC SUBNET ROUTE TABLE #####
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-internet-gateway'

  VPCPublicGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public'

  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCPublicGatewayAttachment # AWS::EC2::VPCGatewayAttachment, AWS::EC2::InternetGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteTablePublicAssocSubnetPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetAPublic

  RouteTablePublicAssocSubnetPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetBPublic

  ##### CONFIGURATION PRIVATE SUBNET ROUTE TABLE #####
  EIPNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC

  NatGatewayForPrivateSubnetAB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway.AllocationId
      SubnetId: !Ref SubnetAPublic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-nat-gateway-in-subnet-a'

  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private'

  RouteTablePrivateInternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayForPrivateSubnetAB

  RouteTablePrivateAssocSubnetPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetAPrivate

  RouteTablePrivateAssocSubnetPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetBPrivate

  ##### CONFIGURATION PRIVATE HOSTED ZONE #####
  HostedZonePrivate:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: jpinsolleaunepetitebite.local
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        - Key: Name
          Value: !Sub '${Environment}-hosted-zone'

  ##### CONFIGURATION PRIVATE HOSTED ZONE #####
  EndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref RouteTablePrivate
        - !Ref RouteTablePublic
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway

  EndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref RouteTablePrivate
        - !Ref RouteTablePublic
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway